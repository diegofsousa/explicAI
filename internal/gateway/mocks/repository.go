// Code generated by mockery v2.52.3. DO NOT EDIT.

package gatewaymocks

import (
	context "context"

	repository "github.com/diegofsousa/explicAI/internal/gateway/repository"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// CreateSummary provides a mock function with given fields: ctx, status
func (_m *Repository) CreateSummary(ctx context.Context, status repository.Status) (*repository.SummaryCreateOutput, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateSummary")
	}

	var r0 *repository.SummaryCreateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Status) (*repository.SummaryCreateOutput, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Status) *repository.SummaryCreateOutput); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.SummaryCreateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Status) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CreateSummary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSummary'
type Repository_CreateSummary_Call struct {
	*mock.Call
}

// CreateSummary is a helper method to define mock.On call
//   - ctx context.Context
//   - status repository.Status
func (_e *Repository_Expecter) CreateSummary(ctx interface{}, status interface{}) *Repository_CreateSummary_Call {
	return &Repository_CreateSummary_Call{Call: _e.mock.On("CreateSummary", ctx, status)}
}

func (_c *Repository_CreateSummary_Call) Run(run func(ctx context.Context, status repository.Status)) *Repository_CreateSummary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.Status))
	})
	return _c
}

func (_c *Repository_CreateSummary_Call) Return(_a0 *repository.SummaryCreateOutput, _a1 error) *Repository_CreateSummary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CreateSummary_Call) RunAndReturn(run func(context.Context, repository.Status) (*repository.SummaryCreateOutput, error)) *Repository_CreateSummary_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSummaryByExternalID provides a mock function with given fields: ctx, externalID
func (_m *Repository) DeleteSummaryByExternalID(ctx context.Context, externalID uuid.UUID) error {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSummaryByExternalID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_DeleteSummaryByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSummaryByExternalID'
type Repository_DeleteSummaryByExternalID_Call struct {
	*mock.Call
}

// DeleteSummaryByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
func (_e *Repository_Expecter) DeleteSummaryByExternalID(ctx interface{}, externalID interface{}) *Repository_DeleteSummaryByExternalID_Call {
	return &Repository_DeleteSummaryByExternalID_Call{Call: _e.mock.On("DeleteSummaryByExternalID", ctx, externalID)}
}

func (_c *Repository_DeleteSummaryByExternalID_Call) Run(run func(ctx context.Context, externalID uuid.UUID)) *Repository_DeleteSummaryByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_DeleteSummaryByExternalID_Call) Return(_a0 error) *Repository_DeleteSummaryByExternalID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_DeleteSummaryByExternalID_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *Repository_DeleteSummaryByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaries provides a mock function with given fields: ctx
func (_m *Repository) GetSummaries(ctx context.Context) ([]repository.SummaryOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSummaries")
	}

	var r0 []repository.SummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]repository.SummaryOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []repository.SummaryOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.SummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSummaries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaries'
type Repository_GetSummaries_Call struct {
	*mock.Call
}

// GetSummaries is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Repository_Expecter) GetSummaries(ctx interface{}) *Repository_GetSummaries_Call {
	return &Repository_GetSummaries_Call{Call: _e.mock.On("GetSummaries", ctx)}
}

func (_c *Repository_GetSummaries_Call) Run(run func(ctx context.Context)) *Repository_GetSummaries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Repository_GetSummaries_Call) Return(_a0 []repository.SummaryOutput, _a1 error) *Repository_GetSummaries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSummaries_Call) RunAndReturn(run func(context.Context) ([]repository.SummaryOutput, error)) *Repository_GetSummaries_Call {
	_c.Call.Return(run)
	return _c
}

// GetSummaryByExternalID provides a mock function with given fields: ctx, externalID
func (_m *Repository) GetSummaryByExternalID(ctx context.Context, externalID uuid.UUID) (*repository.SummaryOutput, error) {
	ret := _m.Called(ctx, externalID)

	if len(ret) == 0 {
		panic("no return value specified for GetSummaryByExternalID")
	}

	var r0 *repository.SummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*repository.SummaryOutput, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *repository.SummaryOutput); ok {
		r0 = rf(ctx, externalID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.SummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetSummaryByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSummaryByExternalID'
type Repository_GetSummaryByExternalID_Call struct {
	*mock.Call
}

// GetSummaryByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID uuid.UUID
func (_e *Repository_Expecter) GetSummaryByExternalID(ctx interface{}, externalID interface{}) *Repository_GetSummaryByExternalID_Call {
	return &Repository_GetSummaryByExternalID_Call{Call: _e.mock.On("GetSummaryByExternalID", ctx, externalID)}
}

func (_c *Repository_GetSummaryByExternalID_Call) Run(run func(ctx context.Context, externalID uuid.UUID)) *Repository_GetSummaryByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetSummaryByExternalID_Call) Return(_a0 *repository.SummaryOutput, _a1 error) *Repository_GetSummaryByExternalID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetSummaryByExternalID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*repository.SummaryOutput, error)) *Repository_GetSummaryByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSummarySummarized provides a mock function with given fields: ctx, input
func (_m *Repository) UpdateSummarySummarized(ctx context.Context, input repository.SummaryUpdateSummarizedInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSummarySummarized")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.SummaryUpdateSummarizedInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateSummarySummarized_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSummarySummarized'
type Repository_UpdateSummarySummarized_Call struct {
	*mock.Call
}

// UpdateSummarySummarized is a helper method to define mock.On call
//   - ctx context.Context
//   - input repository.SummaryUpdateSummarizedInput
func (_e *Repository_Expecter) UpdateSummarySummarized(ctx interface{}, input interface{}) *Repository_UpdateSummarySummarized_Call {
	return &Repository_UpdateSummarySummarized_Call{Call: _e.mock.On("UpdateSummarySummarized", ctx, input)}
}

func (_c *Repository_UpdateSummarySummarized_Call) Run(run func(ctx context.Context, input repository.SummaryUpdateSummarizedInput)) *Repository_UpdateSummarySummarized_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.SummaryUpdateSummarizedInput))
	})
	return _c
}

func (_c *Repository_UpdateSummarySummarized_Call) Return(_a0 error) *Repository_UpdateSummarySummarized_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateSummarySummarized_Call) RunAndReturn(run func(context.Context, repository.SummaryUpdateSummarizedInput) error) *Repository_UpdateSummarySummarized_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSummaryTranscribed provides a mock function with given fields: ctx, input
func (_m *Repository) UpdateSummaryTranscribed(ctx context.Context, input repository.SummaryUpdateTranscribedInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSummaryTranscribed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.SummaryUpdateTranscribedInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_UpdateSummaryTranscribed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSummaryTranscribed'
type Repository_UpdateSummaryTranscribed_Call struct {
	*mock.Call
}

// UpdateSummaryTranscribed is a helper method to define mock.On call
//   - ctx context.Context
//   - input repository.SummaryUpdateTranscribedInput
func (_e *Repository_Expecter) UpdateSummaryTranscribed(ctx interface{}, input interface{}) *Repository_UpdateSummaryTranscribed_Call {
	return &Repository_UpdateSummaryTranscribed_Call{Call: _e.mock.On("UpdateSummaryTranscribed", ctx, input)}
}

func (_c *Repository_UpdateSummaryTranscribed_Call) Run(run func(ctx context.Context, input repository.SummaryUpdateTranscribedInput)) *Repository_UpdateSummaryTranscribed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.SummaryUpdateTranscribedInput))
	})
	return _c
}

func (_c *Repository_UpdateSummaryTranscribed_Call) Return(_a0 error) *Repository_UpdateSummaryTranscribed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_UpdateSummaryTranscribed_Call) RunAndReturn(run func(context.Context, repository.SummaryUpdateTranscribedInput) error) *Repository_UpdateSummaryTranscribed_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
