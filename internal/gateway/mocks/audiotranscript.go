// Code generated by mockery v2.52.3. DO NOT EDIT.

package gatewaymocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AudioTranscript is an autogenerated mock type for the AudioTranscript type
type AudioTranscript struct {
	mock.Mock
}

type AudioTranscript_Expecter struct {
	mock *mock.Mock
}

func (_m *AudioTranscript) EXPECT() *AudioTranscript_Expecter {
	return &AudioTranscript_Expecter{mock: &_m.Mock}
}

// Transcribe provides a mock function with given fields: ctx, audio
func (_m *AudioTranscript) Transcribe(ctx context.Context, audio []byte) (*string, error) {
	ret := _m.Called(ctx, audio)

	if len(ret) == 0 {
		panic("no return value specified for Transcribe")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) (*string, error)); ok {
		return rf(ctx, audio)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *string); ok {
		r0 = rf(ctx, audio)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, audio)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AudioTranscript_Transcribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transcribe'
type AudioTranscript_Transcribe_Call struct {
	*mock.Call
}

// Transcribe is a helper method to define mock.On call
//   - ctx context.Context
//   - audio []byte
func (_e *AudioTranscript_Expecter) Transcribe(ctx interface{}, audio interface{}) *AudioTranscript_Transcribe_Call {
	return &AudioTranscript_Transcribe_Call{Call: _e.mock.On("Transcribe", ctx, audio)}
}

func (_c *AudioTranscript_Transcribe_Call) Run(run func(ctx context.Context, audio []byte)) *AudioTranscript_Transcribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *AudioTranscript_Transcribe_Call) Return(_a0 *string, _a1 error) *AudioTranscript_Transcribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AudioTranscript_Transcribe_Call) RunAndReturn(run func(context.Context, []byte) (*string, error)) *AudioTranscript_Transcribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewAudioTranscript creates a new instance of AudioTranscript. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAudioTranscript(t interface {
	mock.TestingT
	Cleanup(func())
}) *AudioTranscript {
	mock := &AudioTranscript{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
