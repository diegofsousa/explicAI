// Code generated by mockery v2.52.3. DO NOT EDIT.

package gatewaymocks

import (
	context "context"

	summarize "github.com/diegofsousa/explicAI/internal/gateway/summarize"
	mock "github.com/stretchr/testify/mock"
)

// Summarize is an autogenerated mock type for the Summarize type
type Summarize struct {
	mock.Mock
}

type Summarize_Expecter struct {
	mock *mock.Mock
}

func (_m *Summarize) EXPECT() *Summarize_Expecter {
	return &Summarize_Expecter{mock: &_m.Mock}
}

// FullTextOrganize provides a mock function with given fields: ctx, transcription
func (_m *Summarize) FullTextOrganize(ctx context.Context, transcription string) (*string, error) {
	ret := _m.Called(ctx, transcription)

	if len(ret) == 0 {
		panic("no return value specified for FullTextOrganize")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*string, error)); ok {
		return rf(ctx, transcription)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *string); ok {
		r0 = rf(ctx, transcription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transcription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Summarize_FullTextOrganize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullTextOrganize'
type Summarize_FullTextOrganize_Call struct {
	*mock.Call
}

// FullTextOrganize is a helper method to define mock.On call
//   - ctx context.Context
//   - transcription string
func (_e *Summarize_Expecter) FullTextOrganize(ctx interface{}, transcription interface{}) *Summarize_FullTextOrganize_Call {
	return &Summarize_FullTextOrganize_Call{Call: _e.mock.On("FullTextOrganize", ctx, transcription)}
}

func (_c *Summarize_FullTextOrganize_Call) Run(run func(ctx context.Context, transcription string)) *Summarize_FullTextOrganize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Summarize_FullTextOrganize_Call) Return(_a0 *string, _a1 error) *Summarize_FullTextOrganize_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Summarize_FullTextOrganize_Call) RunAndReturn(run func(context.Context, string) (*string, error)) *Summarize_FullTextOrganize_Call {
	_c.Call.Return(run)
	return _c
}

// Resume provides a mock function with given fields: ctx, transcription
func (_m *Summarize) Resume(ctx context.Context, transcription string) (*summarize.ResumeOutput, error) {
	ret := _m.Called(ctx, transcription)

	if len(ret) == 0 {
		panic("no return value specified for Resume")
	}

	var r0 *summarize.ResumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*summarize.ResumeOutput, error)); ok {
		return rf(ctx, transcription)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *summarize.ResumeOutput); ok {
		r0 = rf(ctx, transcription)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*summarize.ResumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transcription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Summarize_Resume_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Resume'
type Summarize_Resume_Call struct {
	*mock.Call
}

// Resume is a helper method to define mock.On call
//   - ctx context.Context
//   - transcription string
func (_e *Summarize_Expecter) Resume(ctx interface{}, transcription interface{}) *Summarize_Resume_Call {
	return &Summarize_Resume_Call{Call: _e.mock.On("Resume", ctx, transcription)}
}

func (_c *Summarize_Resume_Call) Run(run func(ctx context.Context, transcription string)) *Summarize_Resume_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Summarize_Resume_Call) Return(_a0 *summarize.ResumeOutput, _a1 error) *Summarize_Resume_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Summarize_Resume_Call) RunAndReturn(run func(context.Context, string) (*summarize.ResumeOutput, error)) *Summarize_Resume_Call {
	_c.Call.Return(run)
	return _c
}

// NewSummarize creates a new instance of Summarize. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSummarize(t interface {
	mock.TestingT
	Cleanup(func())
}) *Summarize {
	mock := &Summarize{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
